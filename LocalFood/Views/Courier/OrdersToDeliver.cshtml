@model IEnumerable<LocalFood.Models.Order>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Доставка замовлень";
}

<h1 class="mb-4">Доставка замовлень</h1>

<div id="map" class="rounded mb-4" style="height: 500px; border: 2px solid #444;"></div>

<div class="card shadow-sm bg-dark text-light mb-4">
    <div class="card-body">
        <table class="table table-dark table-bordered w-100">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Клієнт</th>
                    <th>Адреса</th>
                    <th>Статус</th>
                    <th>Ресторан</th>
                    <th>Дії</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model)
                {
                    var isMine = order.CourierId == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                    <tr>
                        <td>@order.OrderId</td>
                        <td>@order.CustomerName</td>
                        <td>@order.Address</td>
                        <td>@order.OrderStatus?.Name</td>
                        <td>@order.Restaurant?.Name</td>
                        <td>
                            @if (isMine)
                            {
                                <span class="badge bg-success mb-1">Моє замовлення</span>

                                <br />
                            }
                            <button class="btn btn-sm btn-outline-primary show-route mb-1"
                                    data-restaurant="@order.Restaurant?.Address"
                                    data-customer="@order.Address">
                                <i class="fa-solid fa-map me-1"></i> Маршрут
                            </button>
                            <form asp-action="StartDelivery" method="post" style="display:inline;">
                                <input type="hidden" name="orderId" value="@order.OrderId" />
                                <button type="submit" class="btn btn-sm btn-warning mb-1">
                                    <i class="fa-solid fa-play me-1"></i> Почати
                                </button>
                            </form>
                            <form asp-action="CompleteDelivery" method="post" style="display:inline;">
                                <input type="hidden" name="orderId" value="@order.OrderId" />
                                <button type="submit" class="btn btn-sm btn-success mb-1">
                                    <i class="fa-solid fa-check me-1"></i> Завершити
                                </button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <link href="https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.css" rel="stylesheet" />
    <script src="https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.js"></script>

    <script>
        const map = new maplibregl.Map({
            container: 'map',
            style: 'https://api.maptiler.com/maps/streets/style.json?key=v8pi6Yceq2CQ8UEckbB7',
            center: [31.1656, 48.3794],
            zoom: 5
        });

        async function getCoordinates(address) {
            const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`);
            const data = await response.json();
            if (data.length > 0) {
                return [parseFloat(data[0].lon), parseFloat(data[0].lat)];
            }
            return null;
        }

        async function showRoute(restaurantAddress, customerAddress) {
            const from = await getCoordinates(restaurantAddress);
            const to = await getCoordinates(customerAddress);

            if (!from || !to) {
                alert("Неможливо побудувати маршрут за вказаними адресами.");
                return;
            }

            map.flyTo({ center: from, zoom: 12 });

            new maplibregl.Marker({ color: 'green' }).setLngLat(from).addTo(map);
            new maplibregl.Marker({ color: 'red' }).setLngLat(to).addTo(map);

            const directionsUrl = `https://router.project-osrm.org/route/v1/driving/${from[0]},${from[1]};${to[0]},${to[1]}?overview=full&geometries=geojson`;

            const routeRes = await fetch(directionsUrl);
            const routeData = await routeRes.json();

            if (routeData.routes.length > 0) {
                const routeGeo = {
                    type: "Feature",
                    geometry: routeData.routes[0].geometry
                };

                if (map.getSource('route')) {
                    map.removeLayer('route');
                    map.removeSource('route');
                }

                map.addSource('route', {
                    type: 'geojson',
                    data: routeGeo
                });

                map.addLayer({
                    id: 'route',
                    type: 'line',
                    source: 'route',
                    paint: {
                        'line-color': '#0074D9',
                        'line-width': 4
                    }
                });
            }
        }

        document.querySelectorAll(".show-route").forEach(btn => {
            btn.addEventListener("click", () => {
                const restaurant = btn.dataset.restaurant;
                const customer = btn.dataset.customer;
                showRoute(restaurant, customer);
            });
        });
    </script>
}
